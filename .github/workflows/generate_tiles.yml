name: Generate tiles

on:
  workflow_dispatch:
  schedule: # Run every day at midnight
    - cron: "0 0 * * *"

jobs:
  version_check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x" # Use the latest Python 3 version

      # Run the update_latest_version.py script
      # This will update the latest_version.txt file with the latest version from the data hub
      - name: Update latest version
        run: |
          python update_latest_version.py

      # Read the latest version from the text file
      # Output the latest version to a variable latest_version
      - name: Read latest version
        id: read_latest_version
        run: |
          LATEST_VERSION=$(cat latest_version.txt 2>/dev/null)
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
          echo "latest-version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      # Read the current version from the text file
      # Output the current version to a variable current_version
      - name: Read current version
        id: read_version
        run: |
          echo "CURRENT_VERSION=$(cat current_version.txt 2>/dev/null)" >> $GITHUB_ENV
          echo "current-version=$(cat current_version.txt 2>/dev/null)" >> $GITHUB_OUTPUT

      # If the LATEST_VERSION is different from the CURRENT_VERSION, set a boolean as a github output GITHUB_OUTPUT
      # If we have no current version, we assume we need to download
      - name: Check if we need to download
        id: check_download
        run: |
          if [ $LATEST_VERSION != $CURRENT_VERSION ] || [ -z $CURRENT_VERSION ]; then
            echo "download=true" >> $GITHUB_OUTPUT
          else
            echo "download=false" >> $GITHUB_OUTPUT
          fi

    outputs:
      latest-version: ${{ steps.read_latest_version.outputs.latest_version }}
      current-version: ${{ steps.read_version.outputs.current_version }}
      download: ${{ steps.check_download.outputs.download }}

  download_and_generate_tiles:
    needs: version_check
    if: needs.version_check.outputs.download == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: set up homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: install tippecanoe
        run: brew install tippecanoe

      - name: run download shell file
        run: ./download.sh

      - name: run the generate shell file
        run: ./generate_tiles.sh

      - name: check for changes
        run: git status

      - name: deploy tiles directory to azure storage container
        uses: Azure/CLI@v1
        with:
          inlineScript: |
            az storage blob sync \
              --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} \
              --container ${{ secrets.AZURE_STORAGE_CONTAINER }} \
              --source ./tiles/ \
              --delete-destination true \
              --content-encoding "gzip"
        env:
          AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}

      - name: delete the tiles directory
        run: rm -rf tiles/

      - name: delete the mbtiles file
        run: rm -rf osopenzoomstack.mbtiles

  update_version_file:
    # Needs to run if version_check indicates a download is needed and after download_and_generate_tiles
    needs: [version_check, download_and_generate_tiles]
    runs-on: ubuntu-latest
    if: needs.version_check.outputs.download == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Update current version file
        run: |
          echo "${{ needs.version_check.outputs.latest-version }}" > current_version.txt

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add current_version.txt
          git commit -m "Update current version to ${{ needs.version_check.outputs.latest-version }}"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
